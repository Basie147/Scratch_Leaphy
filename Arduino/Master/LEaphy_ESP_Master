#include "painlessMesh.h"

#define   MESH_PREFIX     "whateverYouLike" // Prefix for your mesh network
#define   MESH_PASSWORD   "somethingSneaky" // Set your own password for the mesh network
#define   MESH_PORT       5555 // Select an unused port for your network

Scheduler userScheduler; // to control your personal task
painlessMesh  mesh;
String incomingMessage = ""; // for incoming serial data

// User stub
void sendMessage() ; // Prototype so PlatformIO doesn't complain

Task taskSendMessage( TASK_SECOND , 1, &sendMessage );

void sendMessage() {
  String msg = incomingMessage;
  msg += mesh.getNodeId();
  mesh.sendBroadcast( msg );
  taskSendMessage.setInterval(TASK_SECOND);
}

// Needed for painless library
void receivedCallback( uint32_t from, String &msg ) {
  Serial.printf("%s\n", msg.c_str());


}

void newConnectionCallback(uint32_t nodeId) {
    Serial.printf("--> startHere: New Connection, nodeId = %u\n", nodeId);
}

void changedConnectionCallback() {
  Serial.printf("Changed connections\n");
}

void nodeTimeAdjustedCallback(int32_t offset) {
    Serial.printf("Adjusted time %u. Offset = %d\n", mesh.getNodeTime(),offset);
}


void setup() {
  Serial.begin(115200);

//mesh.setDebugMsgTypes( ERROR | MESH_STATUS | CONNECTION | SYNC | COMMUNICATION | GENERAL | MSG_TYPES | REMOTE ); // all types on
  mesh.setDebugMsgTypes( ERROR | STARTUP );  // set before init() so that you can see startup messages

  mesh.init( MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT );
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);
  
  pinMode(16, OUTPUT); // set pin 16 as output
  
  userScheduler.addTask( taskSendMessage );
  taskSendMessage.enable();
}

void loop() {
   // send data only when you receive data:
  // it will run the user scheduler as well

    if (Serial.available() > 0) {
    // read the incoming message:
    incomingMessage = Serial.readStringUntil('\n');

    // say what you got:
    Serial.print("I received: ");
    Serial.println(incomingMessage);

    // Check the received message
    if (incomingMessage == "stop_leaphy") {
      digitalWrite(14, LOW); // Turn pin 16 ON
      sendMessage();
    } else if (incomingMessage == "start_leaphy") {
      digitalWrite(14, HIGH); // Turn pin 16 OFF
      sendMessage();
    }
  }
  mesh.update();

}